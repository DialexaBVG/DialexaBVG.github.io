{"ast":null,"code":"var _jsxFileName = \"/Users/summergerhart/Documents/GitHub/real-dialexa-deets/src/views/PlayGame/gameTemp.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './game.css';\nimport questionAPI from './question';\nimport QuestionBox from '../components/Game/QuestionBox.js';\nimport Result from '../components/Game/ResultBox.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Quiz extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      questionAPI().then(question => {\n        this.setState({\n          questionBank: question\n        });\n      });\n    };\n\n    this.playAgain = () => {\n      this.getQuestions();\n      this.setState({\n        score: 0,\n        responses: 0\n      });\n    };\n\n    this.computeAnswer = (answer, correctAns) => {\n      if (answer === correctAns) {\n        this.setState({\n          score: this.state.score + 1\n        });\n      }\n\n      this.setState({\n        responses: this.state.responses < 5 ? this.state.responses + 1 : 5\n      });\n    };\n\n    this.state = {\n      questionBank: [],\n      score: 0,\n      responses: 0\n    };\n  } // Function to get question from ./question\n\n\n  // componentDidMount function to get question\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: \"QuizOn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), this.state.questionBank.length > 0 && this.state.responses < 5 && this.state.questionBank.map(({\n        question,\n        answers,\n        correct,\n        questionId\n      }) => /*#__PURE__*/_jsxDEV(QuestionBox, {\n        question: question,\n        options: answers,\n        selected: answer => this.computeAnswer(answer, correct)\n      }, questionId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 35\n      }, this)), this.state.responses === 5 ? /*#__PURE__*/_jsxDEV(Result, {\n        score: this.state.score,\n        playAgain: this.playAgain\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 16\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Quiz, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 74,\n  columnNumber: 19\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/summergerhart/Documents/GitHub/real-dialexa-deets/src/views/PlayGame/gameTemp.js"],"names":["React","Component","ReactDOM","questionAPI","QuestionBox","Result","Quiz","constructor","getQuestions","then","question","setState","questionBank","playAgain","score","responses","computeAnswer","answer","correctAns","state","componentDidMount","render","length","map","answers","correct","questionId","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,YAAP;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;;;AAEA,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AACzBM,EAAAA,WAAW,GAAG;AACZ;;AADY,SAUdC,YAVc,GAUC,MAAM;AACnBL,MAAAA,WAAW,GAAGM,IAAd,CAAmBC,QAAQ,IAAI;AAC7B,aAAKC,QAAL,CAAc;AAACC,UAAAA,YAAY,EAAEF;AAAf,SAAd;AACD,OAFD;AAGD,KAda;;AAAA,SAiBdG,SAjBc,GAiBF,MAAM;AAChB,WAAKL,YAAL;AACA,WAAKG,QAAL,CAAc;AAACG,QAAAA,KAAK,EAAE,CAAR;AAAWC,QAAAA,SAAS,EAAE;AAAtB,OAAd;AACD,KApBa;;AAAA,SAuBdC,aAvBc,GAuBE,CAACC,MAAD,EAASC,UAAT,KAAwB;AACtC,UAAID,MAAM,KAAKC,UAAf,EAA2B;AACzB,aAAKP,QAAL,CAAc;AACZG,UAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWL,KAAX,GAAmB;AADd,SAAd;AAGD;;AACD,WAAKH,QAAL,CAAc;AACZI,QAAAA,SAAS,EAAE,KAAKI,KAAL,CAAWJ,SAAX,GAAuB,CAAvB,GACP,KAAKI,KAAL,CAAWJ,SAAX,GAAuB,CADhB,GAEP;AAHQ,OAAd;AAKD,KAlCa;;AAEZ,SAAKI,KAAL,GAAa;AACXP,MAAAA,YAAY,EAAE,EADH;AAEXE,MAAAA,KAAK,EAAE,CAFI;AAGXC,MAAAA,SAAS,EAAE;AAHA,KAAb;AAKD,GARwB,CAUzB;;;AA2BA;AACAK,EAAAA,iBAAiB,GAAG;AAClB,SAAKZ,YAAL;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,wBAAQ;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACN;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADM,EAKL,KAAKF,KAAL,CAAWP,YAAX,CAAwBU,MAAxB,GAAiC,CAAjC,IACA,KAAKH,KAAL,CAAWJ,SAAX,GAAuB,CADvB,IAEA,KAAKI,KAAL,CAAWP,YAAX,CAAwBW,GAAxB,CAA4B,CAAC;AAACb,QAAAA,QAAD;AAAWc,QAAAA,OAAX;AAC7BC,QAAAA,OAD6B;AACpBC,QAAAA;AADoB,OAAD,kBACH,QAAC,WAAD;AAAa,QAAA,QAAQ,EAC7ChB,QADwB;AACd,QAAA,OAAO,EAAEc,OADK;AAEzB,QAAA,QAAQ,EAAEP,MAAM,IAAI,KAAKD,aAAL,CAAmBC,MAAnB,EAA2BQ,OAA3B;AAFK,SACSC,UADT;AAAA;AAAA;AAAA;AAAA,cADzB,CAPK,EAaJ,KAAKP,KAAL,CAAWJ,SAAX,KAAyB,CAAzB,gBACK,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,KAAKI,KAAL,CAAWL,KAA1B;AACD,QAAA,SAAS,EAAE,KAAKD;AADf;AAAA;AAAA;AAAA;AAAA,cADL,GAGI,IAhBA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAoBD;;AA/DwB;;AAkE3BX,QAAQ,CAACmB,MAAT,eAAgB,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBM,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './game.css';\nimport questionAPI from './question';\nimport QuestionBox from '../components/Game/QuestionBox.js';\nimport Result from '../components/Game/ResultBox.js';\n\nclass Quiz extends Component {\n    constructor() {\n      super();\n      this.state = {\n        questionBank: [],\n        score: 0,\n        responses: 0\n      };\n    }\n    \n    // Function to get question from ./question\n    getQuestions = () => {\n      questionAPI().then(question => {\n        this.setState({questionBank: question});\n      });\n    };\n    \n    // Set state back to default and call function\n    playAgain = () => {\n      this.getQuestions();\n      this.setState({score: 0, responses: 0});\n    };\n    \n    // Function to compute scores\n    computeAnswer = (answer, correctAns) => {\n      if (answer === correctAns) {\n        this.setState({\n          score: this.state.score + 1\n        });\n      }\n      this.setState({\n        responses: this.state.responses < 5\n          ? this.state.responses + 1\n          : 5\n      });\n    };\n    \n    // componentDidMount function to get question\n    componentDidMount() {\n      this.getQuestions();\n    }\n    \n    render() {\n      return (<div className=\"container\">\n        <div className=\"title\">\n          QuizOn\n        </div>\n    \n        {this.state.questionBank.length > 0 && \n         this.state.responses < 5 && \n         this.state.questionBank.map(({question, answers,\n         correct, questionId}) => <QuestionBox question=\n         {question} options={answers} key={questionId}\n         selected={answer => this.computeAnswer(answer, correct)}/>)}\n    \n        {\n          this.state.responses === 5\n            ? (<Result score={this.state.score}\n              playAgain={this.playAgain}/>)\n            : null\n        }\n    \n      </div>)\n    }\n  }\n    \n  ReactDOM.render(<Quiz/>, document.getElementById(\"root\"));"]},"metadata":{},"sourceType":"module"}