{"ast":null,"code":"var _jsxFileName = \"/Users/summergerhart/Documents/GitHub/real-dialexa-deets/src/helpers/authentication.js\",\n    _s = $RefreshSig$();\n\nimport Firebase from 'firebase';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Onboardingstepper from '../views/Onboardingstepper.js'; //GOOGLE AUTHENTICATION \\/ \\/ \\/ \\/ \\/ \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst renderAfterSignOn = () => {\n  /*#__PURE__*/\n  _jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/game\",\n        exact: true,\n        render: () => /*#__PURE__*/_jsxDEV(GameSelector, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\nfunction authentication(info) {\n  _s();\n\n  var provider = new Firebase.auth.GoogleAuthProvider();\n  provider.addScope('https://www.googleapis.com/auth/userinfo.profile'); //asks for users profile\n\n  provider.addScope('https://www.googleapis.com/auth/user.birthday.read'); //asks for user bd\n\n  provider.addScope('https://www.googleapis.com/auth/userinfo.email'); //and email\n\n  Firebase.auth().useDeviceLanguage();\n  provider.setCustomParameters({\n    'login_hint': 'user@dialexa.com'\n  });\n  Firebase.auth().signInWithPopup(provider).then(result => {\n    /** @type {firebase.auth.OAuthCredential} */\n    var credential = result.credential; // console.log(credential);\n    // This gives you a Google Access Token. You can use it to access the Google API.\n\n    var token = credential.accessToken; // The signed-in user info.\n\n    var currentUser = result.user;\n    var usersEmail = currentUser.email;\n    var usersPhotoURL = currentUser.photoURL;\n    var userEmailVerified = currentUser.emailVerified;\n    var userUniqueID = currentUser.uid;\n    var userName = currentUser.displayName; // console.log(token);\n    // console.log({usersEmail});\n    // console.log({usersPhotoURL}); //prints user email to console! lfg\n    // console.log({userEmailVerified});\n    // console.log({userUniqueID});     \n\n    info = [token, usersEmail, usersPhotoURL, userEmailVerified, userUniqueID];\n\n    function writeUserData(name, email, photoURL, emailverified, id) {\n      Firebase.database().ref('users/' + id.set({\n        name: name,\n        email: email,\n        photoURL: photoURL,\n        id: id,\n        emailverified: emailverified\n      }));\n    }\n\n    writeUserData(userName, usersEmail, usersPhotoURL, userEmailVerified, userUniqueID); // ...\n  }).catch(error => {// // Handle Errors here.\n    // var errorCode = error.code;\n    // var errorMessage = error.message;\n    // // The email of the user's account used.\n    // var email = error.email;\n    // // The firebase.auth.AuthCredential type that was used.\n    // var credential = error.credential;\n    // // ...     console.log(user)\n    // take you to new page?\n  });\n  return info;\n}\n\n_s(authentication, \"BcOTqc4wwa4CxJGcpsWeXUvpe98=\", true);\n\n;\n\nconst signout = () => {\n  Firebase.auth().signOut().then(() => {\n    console.log(\"Signed out!\");\n  }).catch(error => {\n    console.log(\"Can't be signed out!\");\n  });\n};\n\nexport { authentication, signout, renderAfterSignOn };","map":{"version":3,"sources":["/Users/summergerhart/Documents/GitHub/real-dialexa-deets/src/helpers/authentication.js"],"names":["Firebase","BrowserRouter","Switch","Route","Onboardingstepper","renderAfterSignOn","authentication","info","provider","auth","GoogleAuthProvider","addScope","useDeviceLanguage","setCustomParameters","signInWithPopup","then","result","credential","token","accessToken","currentUser","user","usersEmail","email","usersPhotoURL","photoURL","userEmailVerified","emailVerified","userUniqueID","uid","userName","displayName","writeUserData","name","emailverified","id","database","ref","set","catch","error","signout","signOut","console","log"],"mappings":"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","sourcesContent":["import Firebase from 'firebase';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport Onboardingstepper from '../views/Onboardingstepper.js'\n  \n  //GOOGLE AUTHENTICATION \\/ \\/ \\/ \\/ \\/ \n \n  const renderAfterSignOn = () => {\n  \n    <BrowserRouter>\n      <Switch>\n        <Route\n                    path=\"/game\"\n                    exact\n                    render={() => (\n                        <GameSelector />\n                    )}\n                />\n      </Switch>\n    </BrowserRouter>\n  \n}\n\n    function authentication(info) {\n    var provider = new Firebase.auth.GoogleAuthProvider();\n    provider.addScope('https://www.googleapis.com/auth/userinfo.profile'); //asks for users profile\n    provider.addScope('https://www.googleapis.com/auth/user.birthday.read'); //asks for user bd\n    provider.addScope('https://www.googleapis.com/auth/userinfo.email'); //and email\n    Firebase.auth().useDeviceLanguage();\n    provider.setCustomParameters({ \n        'login_hint': 'user@dialexa.com'\n    });\n\n    Firebase.auth()\n    .signInWithPopup(provider)\n    .then((result) => {\n      /** @type {firebase.auth.OAuthCredential} */\n      var credential = result.credential;\n      // console.log(credential);\n      \n \n      // This gives you a Google Access Token. You can use it to access the Google API.\n      var token = credential.accessToken;\n      // The signed-in user info.\n      var currentUser = result.user;\n      var usersEmail = currentUser.email;\n      var usersPhotoURL = currentUser.photoURL;\n      var userEmailVerified = currentUser.emailVerified;  \n      var userUniqueID = currentUser.uid;\n      var userName = currentUser.displayName;\n      // console.log(token);\n      // console.log({usersEmail});\n      // console.log({usersPhotoURL}); //prints user email to console! lfg\n      // console.log({userEmailVerified});\n      // console.log({userUniqueID});     \n      info = [token, usersEmail, usersPhotoURL, userEmailVerified, userUniqueID];\n\n      \n      function writeUserData(name, email, photoURL, emailverified, id) {\n        Firebase.database().ref('users/'+id.set({\n            name: name,\n            email: email,\n            photoURL:photoURL,\n            id: id,\n            emailverified:emailverified \n            \n        }))\n      }\n        writeUserData(userName, usersEmail, usersPhotoURL, userEmailVerified, userUniqueID)\n      // ...\n                           \n \n    }).catch((error) => {\n      // // Handle Errors here.\n      // var errorCode = error.code;\n      // var errorMessage = error.message;\n      // // The email of the user's account used.\n      // var email = error.email;\n      // // The firebase.auth.AuthCredential type that was used.\n      // var credential = error.credential;\n      // // ...     console.log(user)\n      \n  \n      // take you to new page?\n      \n    });\n  \n    return info;\n  };\n\n  \n  const signout = () => {\n    Firebase.auth().signOut().then(() => {\n      console.log(\"Signed out!\");\n  \n    }).catch((error) => { \n      console.log(\"Can't be signed out!\");\n\n    })\n  }\n \n    \n    export {authentication, signout, renderAfterSignOn};"]},"metadata":{},"sourceType":"module"}