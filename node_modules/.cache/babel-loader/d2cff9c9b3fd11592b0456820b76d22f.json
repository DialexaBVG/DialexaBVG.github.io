{"ast":null,"code":"import Firebase from'firebase';import{BrowserRouter,Route}from'react-router-dom';import Onboardingstepper from'../views/Onboardingstepper.js';//GOOGLE AUTHENTICATION \\/ \\/ \\/ \\/ \\/ \nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var renderAfterSignOn=function renderAfterSignOn(){/*#__PURE__*/_jsxs(BrowserRouter,{children:[/*#__PURE__*/_jsx(Route,{path:\"../views/onboardingstepper.js\"}),console.log(\"failed\"),\";\"]});};function authentication(info){var provider=new Firebase.auth.GoogleAuthProvider();provider.addScope('https://www.googleapis.com/auth/userinfo.profile');//asks for users profile\nprovider.addScope('https://www.googleapis.com/auth/user.birthday.read');//asks for user bd\nprovider.addScope('https://www.googleapis.com/auth/userinfo.email');//and email\nFirebase.auth().useDeviceLanguage();provider.setCustomParameters({'login_hint':'user@dialexa.com'});Firebase.auth().signInWithPopup(provider).then(function(result){/** @type {firebase.auth.OAuthCredential} */var credential=result.credential;// console.log(credential);\n// This gives you a Google Access Token. You can use it to access the Google API.\nvar token=credential.accessToken;// The signed-in user info.\nvar currentUser=result.user;var usersEmail=currentUser.email;var usersPhotoURL=currentUser.photoURL;var userEmailVerified=currentUser.emailVerified;var userUniqueID=currentUser.uid;var userName=currentUser.displayName;// console.log(token);\n// console.log({usersEmail});\n// console.log({usersPhotoURL}); //prints user email to console! lfg\n// console.log({userEmailVerified});\n// console.log({userUniqueID});     \ninfo=[token,usersEmail,usersPhotoURL,userEmailVerified,userUniqueID];function writeUserData(name,email,photoURL,emailverified,id){Firebase.database().ref('users/'+id.set({name:name,email:email,photoURL:photoURL,id:id,emailverified:emailverified}));}writeUserData(userName,usersEmail,usersPhotoURL,userEmailVerified,userUniqueID);// ...\n}).catch(function(error){// // Handle Errors here.\n// var errorCode = error.code;\n// var errorMessage = error.message;\n// // The email of the user's account used.\n// var email = error.email;\n// // The firebase.auth.AuthCredential type that was used.\n// var credential = error.credential;\n// // ...     console.log(user)\n// take you to new page?\n});return info;};var signout=function signout(){Firebase.auth().signOut().then(function(){console.log(\"Signed out!\");}).catch(function(error){console.log(\"Can't be signed out!\");});};export{authentication,signout,renderAfterSignOn};","map":{"version":3,"sources":["/Users/summergerhart/Documents/dialexabvg.github.io/src/helpers/authentication.js"],"names":["Firebase","BrowserRouter","Route","Onboardingstepper","renderAfterSignOn","console","log","authentication","info","provider","auth","GoogleAuthProvider","addScope","useDeviceLanguage","setCustomParameters","signInWithPopup","then","result","credential","token","accessToken","currentUser","user","usersEmail","email","usersPhotoURL","photoURL","userEmailVerified","emailVerified","userUniqueID","uid","userName","displayName","writeUserData","name","emailverified","id","database","ref","set","catch","error","signout","signOut"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,UAArB,CACA,OAAQC,aAAR,CAAuBC,KAAvB,KAAmC,kBAAnC,CACA,MAAOC,CAAAA,iBAAP,KAA8B,+BAA9B,CAEE;wFAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAE9B,mBAAC,aAAD,yBACE,KAAC,KAAD,EAAO,IAAI,CAAC,+BAAZ,EADF,CAEGC,OAAO,CAACC,GAAR,CAAY,QAAZ,CAFH,QAKH,CAPC,CASE,QAASC,CAAAA,cAAT,CAAwBC,IAAxB,CAA8B,CAC9B,GAAIC,CAAAA,QAAQ,CAAG,GAAIT,CAAAA,QAAQ,CAACU,IAAT,CAAcC,kBAAlB,EAAf,CACAF,QAAQ,CAACG,QAAT,CAAkB,kDAAlB,EAAuE;AACvEH,QAAQ,CAACG,QAAT,CAAkB,oDAAlB,EAAyE;AACzEH,QAAQ,CAACG,QAAT,CAAkB,gDAAlB,EAAqE;AACrEZ,QAAQ,CAACU,IAAT,GAAgBG,iBAAhB,GACAJ,QAAQ,CAACK,mBAAT,CAA6B,CACzB,aAAc,kBADW,CAA7B,EAIAd,QAAQ,CAACU,IAAT,GACCK,eADD,CACiBN,QADjB,EAECO,IAFD,CAEM,SAACC,MAAD,CAAY,CAChB,4CACA,GAAIC,CAAAA,UAAU,CAAGD,MAAM,CAACC,UAAxB,CACA;AAGA;AACA,GAAIC,CAAAA,KAAK,CAAGD,UAAU,CAACE,WAAvB,CACA;AACA,GAAIC,CAAAA,WAAW,CAAGJ,MAAM,CAACK,IAAzB,CACA,GAAIC,CAAAA,UAAU,CAAGF,WAAW,CAACG,KAA7B,CACA,GAAIC,CAAAA,aAAa,CAAGJ,WAAW,CAACK,QAAhC,CACA,GAAIC,CAAAA,iBAAiB,CAAGN,WAAW,CAACO,aAApC,CACA,GAAIC,CAAAA,YAAY,CAAGR,WAAW,CAACS,GAA/B,CACA,GAAIC,CAAAA,QAAQ,CAAGV,WAAW,CAACW,WAA3B,CACA;AACA;AACA;AACA;AACA;AACAxB,IAAI,CAAG,CAACW,KAAD,CAAQI,UAAR,CAAoBE,aAApB,CAAmCE,iBAAnC,CAAsDE,YAAtD,CAAP,CAGA,QAASI,CAAAA,aAAT,CAAuBC,IAAvB,CAA6BV,KAA7B,CAAoCE,QAApC,CAA8CS,aAA9C,CAA6DC,EAA7D,CAAiE,CAC/DpC,QAAQ,CAACqC,QAAT,GAAoBC,GAApB,CAAwB,SAASF,EAAE,CAACG,GAAH,CAAO,CACpCL,IAAI,CAAEA,IAD8B,CAEpCV,KAAK,CAAEA,KAF6B,CAGpCE,QAAQ,CAACA,QAH2B,CAIpCU,EAAE,CAAEA,EAJgC,CAKpCD,aAAa,CAACA,aALsB,CAAP,CAAjC,EAQD,CACCF,aAAa,CAACF,QAAD,CAAWR,UAAX,CAAuBE,aAAvB,CAAsCE,iBAAtC,CAAyDE,YAAzD,CAAb,CACF;AAGD,CAvCD,EAuCGW,KAvCH,CAuCS,SAACC,KAAD,CAAW,CAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAED,CApDD,EAsDA,MAAOjC,CAAAA,IAAP,CACD,EAGD,GAAMkC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB1C,QAAQ,CAACU,IAAT,GAAgBiC,OAAhB,GAA0B3B,IAA1B,CAA+B,UAAM,CACnCX,OAAO,CAACC,GAAR,CAAY,aAAZ,EAED,CAHD,EAGGkC,KAHH,CAGS,SAACC,KAAD,CAAW,CAClBpC,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAED,CAND,EAOD,CARD,CAWE,OAAQC,cAAR,CAAwBmC,OAAxB,CAAiCtC,iBAAjC","sourcesContent":["import Firebase from 'firebase';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport Onboardingstepper from '../views/Onboardingstepper.js'\n  \n  //GOOGLE AUTHENTICATION \\/ \\/ \\/ \\/ \\/ \n \n  const renderAfterSignOn = () => {\n  \n    <BrowserRouter>\n      <Route path=\"../views/onboardingstepper.js\"/>\n      {console.log(\"failed\")};\n    </BrowserRouter>\n  \n}\n\n    function authentication(info) {\n    var provider = new Firebase.auth.GoogleAuthProvider();\n    provider.addScope('https://www.googleapis.com/auth/userinfo.profile'); //asks for users profile\n    provider.addScope('https://www.googleapis.com/auth/user.birthday.read'); //asks for user bd\n    provider.addScope('https://www.googleapis.com/auth/userinfo.email'); //and email\n    Firebase.auth().useDeviceLanguage();\n    provider.setCustomParameters({ \n        'login_hint': 'user@dialexa.com'\n    });\n\n    Firebase.auth()\n    .signInWithPopup(provider)\n    .then((result) => {\n      /** @type {firebase.auth.OAuthCredential} */\n      var credential = result.credential;\n      // console.log(credential);\n      \n \n      // This gives you a Google Access Token. You can use it to access the Google API.\n      var token = credential.accessToken;\n      // The signed-in user info.\n      var currentUser = result.user;\n      var usersEmail = currentUser.email;\n      var usersPhotoURL = currentUser.photoURL;\n      var userEmailVerified = currentUser.emailVerified;  \n      var userUniqueID = currentUser.uid;\n      var userName = currentUser.displayName;\n      // console.log(token);\n      // console.log({usersEmail});\n      // console.log({usersPhotoURL}); //prints user email to console! lfg\n      // console.log({userEmailVerified});\n      // console.log({userUniqueID});     \n      info = [token, usersEmail, usersPhotoURL, userEmailVerified, userUniqueID];\n\n      \n      function writeUserData(name, email, photoURL, emailverified, id) {\n        Firebase.database().ref('users/'+id.set({\n            name: name,\n            email: email,\n            photoURL:photoURL,\n            id: id,\n            emailverified:emailverified \n            \n        }))\n      }\n        writeUserData(userName, usersEmail, usersPhotoURL, userEmailVerified, userUniqueID)\n      // ...\n                           \n \n    }).catch((error) => {\n      // // Handle Errors here.\n      // var errorCode = error.code;\n      // var errorMessage = error.message;\n      // // The email of the user's account used.\n      // var email = error.email;\n      // // The firebase.auth.AuthCredential type that was used.\n      // var credential = error.credential;\n      // // ...     console.log(user)\n      \n  \n      // take you to new page?\n      \n    });\n  \n    return info;\n  };\n\n  \n  const signout = () => {\n    Firebase.auth().signOut().then(() => {\n      console.log(\"Signed out!\");\n  \n    }).catch((error) => { \n      console.log(\"Can't be signed out!\");\n\n    })\n  }\n \n    \n    export {authentication, signout, renderAfterSignOn};"]},"metadata":{},"sourceType":"module"}